@page "/"
@inject BookParadise.Data.ApplicationDbContext _context
@using BookParadise.Data
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthProvider

@code {
    private List<Book> HotTopics { get; set; } = new();
    private List<Book> MostViewed { get; set; } = new();
    private List<Book> LatestUpdates { get; set; } = new();
    private List<Book> NewReleases { get; set; } = new();
    private List<Book> AllBooks { get; set; } = new();
    private ApplicationUser currentUser;
    private bool isAdmin;
    private string SelectedBook { get; set; } = "default";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user!=null && user.Identity.IsAuthenticated)
        {
            currentUser = await UserManager.GetUserAsync(user);
            isAdmin = await UserManager.IsInRoleAsync(currentUser, "Role_Admin");
        }
        HotTopics = await _context.Books.Where(b => b.HotTopic).ToListAsync();
        MostViewed = await _context.Books.Where(b => b.MostViewed).ToListAsync();
        LatestUpdates = await _context.Books.Where(b => b.Latest).ToListAsync();
        NewReleases = await _context.Books.Where(b => b.NewRelease).ToListAsync();
        AllBooks = await _context.Books.ToListAsync();
    }

    private async Task RemoveBookFromCategory(string bookName, string category)
    {
        var book = await _context.Books.FirstOrDefaultAsync(b => b.BookName == bookName);
        if (book != null)
        {
            switch (category)
            {
                case "Hot Topics": book.HotTopic = false; break;
                case "Most Viewed": book.MostViewed = false; break;
                case "Latest Updates": book.Latest = false; break;
                case "New Releases": book.NewRelease = false; break;
            }
            await _context.SaveChangesAsync();
            await OnInitializedAsync();
        }
    }

    

}



<head>
    <title>Book Paradise</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Book Paradise</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Tangerine">
    <link href="/style/index.css" rel="stylesheet" />
    <script src="/script/slideshow.js"></script>
    <script src="/script/remove.js"></script>

</head>
<HeadSection />

<div class="mainContainer d-flex">
<div class="container">

<br>
	<div class="flex" id="head-title">

		<div class="flex-items write">
<h2>Welcome to <span class="auto-type"></span></h2>
<h2>Come and have fun at <u>BOOK PARADISE</u></h2>
<h2>We have all the <u>E-BOOKS</u> you want!</h2>
                <br>

            </div>
        </div>
        <br>

@foreach (var category in new[] { ("Hot-Topics", HotTopics), ("Most-Viewed", MostViewed), ("Latest-Updates", LatestUpdates), ("New-Releases", NewReleases) })
{
    
    <section id="@category.Item1">
        <h2 class="book-title">@category.Item1</h2>
        <div class="slideshow-container">
            <form method="post" action="api/BookController/remove-from-category">
            @foreach (var book in category.Item2)
            {
            
                <div class="innerPart mySlide-@category.Item1">
                    <a href="/view-book?bookName=@book.BookName"><img src="/cover images/@book.BookName-cover image.jpg"></a>
                    <h3 class="text">@book.BookName</h3>

                </div>

                @if (isAdmin)
                {
                    <div class="removing-@category.Item1" style="display: none;">
                       <input type="checkbox" value="@book.BookName" name="bookNames">
                       <button class="btn btn-danger" type="submit">Remove</button>
                       <button type="reset" class="btn btn-primary" onclick="hideRemoveForm(@category.Item1)">Cancel</button>
                    </div>
                       
                }
              
            }
            </form>
        </div>
        @if (isAdmin)
        {
            <button class="btn btn-danger remove-button-@category.Item1" onclick="showRemoveForm(@category.Item1)">Remove Hot Topic</button>
            <form method="post" action="api/BookController/add-to-category?category=@category.Item1">
                <select @bind="SelectedBook">
                    <option value="default">Add a book to @category.Item1</option>
                    @foreach (var book in AllBooks)
                    {
                        if ((category.Item1 == "Hot Topics" && !book.HotTopic) ||
                            (category.Item1 == "Most Viewed" && !book.MostViewed) ||
                            (category.Item1 == "Latest Updates" && !book.Latest) ||
                            (category.Item1 == "New Releases" && !book.NewRelease))
                        {
                            <option name="bookName" value="@book.BookName">@book.BookName</option>
                        }
                    }
                </select>
                <button type="submit" class="btn btn-primary">Add</button>
            </form>
        }
    </section>
    
    
}
    </div>
</div>
<FooterSection />

<script>
    var typed = new Typed(".auto-type", {
        strings: ["Book Paradise..."],
        typeSpeed: 120,
        backSpeed: 120,
        loop: true
    });
</script>
